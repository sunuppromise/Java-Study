// 자바의 인터페이스 문법을 예제 코드로 구현해보시오.
// 이 문제는 자바 문법중 인터페이스에 대한 개념과 어떻게 사용하는지에 대해서 아는지를 묻는 문제이다.
// 코드를 작성하기 전 아래 4개의 인터페이스 관련 질문에 답해보시오.


// [1] : 인터페이스
// 추상 클래스와 거의 비슷하나 그 추상화 정도가 더 높다(더 엄격). --> 일반 메서드나 멤버 필드(변수)를 가질 수 없다.
// 표준화 및 규격을 인터페이스로 제공 --> 일종의 "설계도" 개념.
// 따라서, 어떤 클래스가 해당 인터페이스를 사용(상속)한다면 인터페이스에 선언되어져 있는 메서드를 구현.
// 인터페이스는 interface 키워드를 사용.
// 추상 클래스와 같이 메서드의 구체적인 내용은 기술되어져 있지 않으므로 인터페이스를 상속받은 클래스에서 재정의(오버라이딩)하여 사용.

// [2] : 상속
// 클래스는 "단일 상속"만 가능, 인터페이스는 "다중 상속"이 가능 --> 가장 큰 차이점.
// class --> extends,      interface --> implements --> 다중 상속을 구현 --> A, B --> 콤마(,)로 분리
// 즉, 이를 이용하면 여러 개의 인터페이스로 부터 메서드를 받아올 수 있게 된다. --> 다중 상속 구현.

// [3] : 장점
// 인터페이스를 이용하면 메서드의 추상적인 "선언"과 그 메서드들을 구체적인 "구현" 부분을 분리시킬 수 있다. --> 매우 큰 장점.
// 하청을 주는 대기업(갑)은 하청업체(을)에 인터페이스만 제공 --> 각 하청업체(을)들이 이를 준수하여(=상속 받아) 개발.
// 분업화된 시스템을 구축하여 "갑"과 "을"이 독립적으로 프로젝트 개발을 해나갈 수 있다. --> 매우 큰 장점.

// [4] : 우선 순위 (extends vs implements)
// 상속을 받는 extends 키워드와 구현을 하는 implements 키워드가 동시에 쓰일 때 --> extends 키워드가 항상 먼저 쓰인다.
// 예시) class Student extends Person implements A, B


public class Java100_oop_Interface2 {
	public static void main(String[] args) {
		
		// [1] : 객체 생성
		
	}
}


// Person 클래스(부모)

// A 인터페이스(부모)

// B 인터페이스(부모)

// Student 클래스(자식)

// 메인 클래스(메인 메서드가 포함)
















